{"name":"Ngandroid","tagline":"ngAndroid is bringing angularjs type directives to android xml attributes","body":"#NgAndroid\r\n\r\nNgAndroid is a compile time MVC framework inspired by [AngularJS](https://angularjs.org/). NgAndroid sticks to the philosophy that views should be separate from the models and the controls. It allows you to declare view - model bindings and events straight from your xml layout that will interact with the scope/controller.\r\n\r\nTo start using NgAndroid you are going to need a model. A model is any class with a default constructor that has accessible getters and setters for the fields that are going to interact with the view.\r\n\r\n###Model\r\n```java\r\npublic class Note {\r\n    private long time;\r\n    private int id;\r\n    private String title;\r\n    private String text;\r\n\r\n\r\n    public long getTime() {\r\n        return time;\r\n    }\r\n\r\n    public void setTime(long time) {\r\n        this.time = time;\r\n    }\r\n\r\n    public int getId() {\r\n        return id;\r\n    }\r\n\r\n    public void setId(int id) {\r\n        this.id = id;\r\n    }\r\n\r\n    public String getTitle() {\r\n        return title;\r\n    }\r\n\r\n    public void setTitle(String title) {\r\n        this.title = title;\r\n    }\r\n\r\n    public String getText() {\r\n        return text;\r\n    }\r\n\r\n    public void setText(String text) {\r\n        this.text = text;\r\n    }\r\n}\r\n```\r\n\r\nThen you'll need a scope. A scope is the scope of the controller. Everything is defined within and referenced from that scope. A scope can be anything. An Activity, Fragment, or even a separate encapsulated class can be defined as scopes. \r\n\r\n\r\n###Controller\r\n```java\r\n// Declare your scope\r\n@NgScope\r\npublic class NoteFragment extends Fragment {\r\n    // declare your models within your scope\r\n    @NgModel\r\n    Note note;\r\n\r\n    @Override\r\n    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {\r\n        // inflate your view with your instance of NgAndroid\r\n        View v = ngAndroid.inflate(this, inflater, R.layout.fragment_note, container, false);\r\n        ...\r\n        return v;\r\n    }\r\n\r\n    // A method that will be called on a view event\r\n    String getTimeString(long time){\r\n        return TimeUtils.getTimeString(time);\r\n    }\r\n}\r\n```\r\n\r\nFinally, you'll need your view. NgAndroid supports a small scripting language within your xml views that makes the 'magic' happen. There will be more documentation on this script later and this will be updated when that happens.\r\n\r\n###View\r\n```xml\r\n<ScrollView ...\r\n    xmlns:tools=\"http://schemas.android.com/tools\"\r\n    xmlns:ngAndroid=\"http://schemas.android.com/apk/res-auto\"\r\n    tools:ignore=\"MissingPrefix\">\r\n\r\n    <RelativeLayout ...>\r\n\r\n        <EditText\r\n            android:id=\"@+id/et_title\"\r\n            ngAndroid:ngModel=\"note.title\"\r\n            .../>\r\n\r\n        <TextView\r\n            android:id=\"@+id/tv_time\"\r\n            ngAndroid:ngText=\"getTimeString(note.time)\"\r\n            .../>\r\n\r\n        <EditText\r\n            android:id=\"@+id/et_text\"\r\n            ngAndroid:ngModel=\"note.text\"\r\n            .../>\r\n    </RelativeLayout>\r\n</ScrollView>\r\n```\r\n\r\nWith the combination of the model,view, and controller you know have a fully interactive user interface. The field 'title' in your Note model will always reflect what is contained in the et_title EditText and vice versa. The TextView tv_time will always be updated with the current time as formatted through the getTimeString(long) method, but it is a one way binding. The field 'time' in your Note model will not be affected by your TextView. Note.text and et_text are also bound two way. Both always reflecting the state of the other. \r\n\r\n###Usage\r\n\r\nIn order to use NgAndroid you will need Gradle. Add this to your build.gradle file in your app's module.\r\n\r\n```groovy\r\nbuildscript {\r\n    repositories {\r\n        jcenter()\r\n    }\r\n    dependencies {\r\n        classpath 'com.neenbedankt.gradle.plugins:android-apt:1.4'\r\n    }\r\n}\r\n\r\nallprojects {\r\n    repositories {\r\n        maven {\r\n            url 'http://oss.sonatype.org/content/repositories/snapshots'\r\n        }\r\n    }\r\n}\r\napply plugin: 'com.neenbedankt.android-apt'\r\n\r\ndependencies {\r\n    compile 'com.github.davityle:ngandroid:1.0.3-SNAPSHOT'\r\n    apt 'com.github.davityle:ng-processor:1.0.3-SNAPSHOT'\r\n}\r\n``` \r\n\r\nThe allprojects.repositories.maven snapshot url will not be necessary once an official version is released.\r\n\r\nRepo can be found here [ngAndroid](https://github.com/davityle/ngAndroid/)\r\n\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}