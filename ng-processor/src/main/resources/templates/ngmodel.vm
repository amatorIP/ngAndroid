package ${packageName};

public class ${simpleClassName}$$NgModel #if($isInterface) implements ${fullName}, #else extends ${fullName} implements #end com.ngandroid.lib.ng.Model {

    #if($isInterface)
        #foreach($field in $fields)
            private ${field.typeName} ${field.name}_;
        #end
    #end
    #foreach($field in $fields)
        private java.util.List<com.ngandroid.lib.ng.ModelObserver<${field.objectType}>> ${field.name}Observers;
    #end


    #foreach($field in $fields)
        public void add${field.name}Observer(com.ngandroid.lib.ng.ModelObserver<${field.objectType}> modelObserver){
            if(${field.name}Observers == null){
                ${field.name}Observers = new java.util.ArrayList<>();
            }
            ${field.name}Observers.add(modelObserver);
        }
    #end

    #if($isInterface)
        #foreach($field in $fields)
            #if($field.getter)
                public ${field.typeName} ${field.getter}() {
                    return ${field.name}_;
                }
            #end
        #end
    #end

    #foreach($field in $fields)
        public void ${field.setter}(${field.typeName} ${field.name}_) {
            #if($isInterface)
                this.${field.name}_ = ${field.name}_;
            #else
                super.${field.setter}(${field.name}_);
            #end
            if(${field.name}Observers != null){
                for(com.ngandroid.lib.ng.ModelObserver<${field.objectType}> observer : ${field.name}Observers){
                    observer.invoke(${field.name}_);
                }
            }
        }
    #end
}